name: Tests and deployment to VPS

on:
  push:
    branches:
      - deploy-testing

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    #environment: dev
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker images
        uses: docker/bake-action@v5
        with:
          pull: true
          load: true
          files: |
            docker-compose.yml
            docker-compose.dev.yml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      -
        name: Start Docker event logging
        run: docker events --filter 'event=health_status' --filter 'container=php' > docker_events.log &
        shell: bash
      -
        name: Start services
        run: docker compose up -d --no-build # --wait
      -
        name: Wait for container to become unhealthy
        run: |
          while true; do
            HEALTH_STATUS=$(docker inspect --format='{{json .State.Health.Status}}' php-1)
            if [ "$HEALTH_STATUS" != "\"healthy\"" ]; then
              echo "Container is not healthy, fetching logs..."
              docker compose exec -T php composer ls /app
              docker logs my-container
              break
            fi
            sleep 5
          done
        shell: bash
      -
        name: Display Docker events
        run: cat docker_events.log
      -
        name: Apply a patch to API Platform (ULID handling)
        run: docker compose exec -T php composer prl && docker compose exec -T php composer prp
      -
        name: Check HTTP reachability
        run: curl -v --fail-with-body http://localhost
      -
        name: Check API reachability
        run: curl -vk --fail-with-body https://localhost
      -
        name: Check PWA reachability
        run: "curl -vk --fail-with-body -H 'Accept: text/html' https://localhost"
      -
        name: Create test database
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
  build_and_push:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v4
      
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          docker build -t lilianlem/rms-php:latest .
          docker push lilianlem/rms-php:latest
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        env:
          MARIADB_ROOT_PASSWORD: ${{ secrets.MARIADB_ROOT_PASSWORD }}
          MARIADB_PASSWORD: ${{ secrets.MARIADB_PASSWORD }}
          JWT_PASSPHRASE: ${{ secrets.JWT_PASSPHRASE }}
          MAILER_DSN: ${{ secrets.MAILER_DSN }}
          NOREPLY_EMAIL: ${{ vars.NOREPLY_EMAIL }}
          CONTACT_EMAIL: ${{ vars.CONTACT_EMAIL }}
          SERVER_NAME: ${{ vars.SERVER_NAME }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          CADDY_MERCURE_JWT_SECRET: ${{ secrets.CADDY_MERCURE_JWT_SECRET }}
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.VPS_PASSWORD }}
          envs: MARIADB_ROOT_PASSWORD,MARIADB_PASSWORD,JWT_PASSPHRASE,MAILER_DSN,NOREPLY_EMAIL,CONTACT_EMAIL,SERVER_NAME,APP_SECRET,CADDY_MERCURE_JWT_SECRET
          script: |
            docker pull lilianlem/rms-php:latest
            cd rms
            docker-compose up -f docker-compose.yml -f docker-compose.prod.yaml -d --build --wait
            docker compose exec php composer prl && docker compose exec php composer prp
            docker compose exec php php bin/console lexik:jwt:generate-keypair --skip-if-exists && docker compose exec php php bin/console lexik:jwt:generate-keypair --env test --skip-if-exists